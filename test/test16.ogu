trait Figura = {
   def area :: self -> Float
       def perimetro :: self -> Perimetro
}

class Circulo(val x,y:Int; val radio:Int) ~ Figura = {

 def area self := pi * radio ^ 2
 def perimetro := 2 * pi * radio
 
}

class Rectangulo(val x,y:Int; ancho,alto:Int) ~ Figura = {

   def area self := ancho * alto

   def perimetro := 2 * (ancho + alto)

}

class Circulo(x,y,r:Int)
class Rectangulo(x,y,w,h:Int)
class Cuadrado(x,y,l:Int) > Rectangulo(x,y,l,l) 

class Triangulo(x1,y1,x2,y2,x3,y3:Int) 

type Figura = Circulo | Rectangulo | Cuadrado | Triangulo


class Leaf(val data:Int)

type Tree = Empty | Leaf | Node(Tree,Tree)

 def depth :: Tree -> Int
 def depth Empty := 0
 def depth Leaf := 1
 def depth Node(l,r) := 1 + max (depth l) (depth r)
