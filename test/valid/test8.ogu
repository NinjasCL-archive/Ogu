; test 8 , pattern matching

let factorial 0 = 1
let factorial 1 = 1
let factorial n = n * factorial (n-1)

let radioAlfa 'a' = "Alfa"
let radioAlfa 'b' = "Bravo"
let radioAlfa 'c' = "Charlie"
let radioAlfa 'd' = "Delta"
let radioAlfa 'c' = "Charlie"

def  factorial : Num -> Num

let factorial 0 = 1
let factorial 1 = 1
let factorial n = n * recur (n-1)

def factorial' : Num -> Num
let factorial' 0 = 1
let factorial' 1 = 1
let factorial' n = n * factorial'(n-1)

def sumarVectores : (Num,Num) -> (Num,Num) -> (Num,Num)

let sumarVectores (a,b) (c,d) = (a+c, b+d)