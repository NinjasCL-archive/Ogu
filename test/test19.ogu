data LockerState = Taken | Free deriving (Show, Eq)

type Code = String

type IntToStringMap = {Int -> String}

type LockerMap = {Int -> Maybe (LockerState,Code)}

data Either a b = Left a | Right b deriving (Eq, Ord, Read, Show)


def lockerLookup : Int -> LockerMap -> Either String Code

let lockerLookup lockerNumber map =
    case map @ lockerNumber of
        Nothing => Left ("Locker number" ++  show lockerNumber ++ " doesn't exist!")
        Some (state,code) => if state /= Taken
                             then Right code
                             else Left ("Locker " ++ show lockerNumber ++ "is already taken")