class Number(value:Int)

data Expression  = Number
                 | Add(Expression, Expression)
                 | Minus(Expression, Expression)
                 | Mult (Expression, Expression)
                 | Divide(Expression, Expression)

def evaluate : Expression -> Int
let evaluate a:Number = value a
let evaluate Add(e1, e2) = evaluate e1 + evaluate e2
let evaluate Minus(e1, e2) = evaluate e1 - evaluate e2
let evaluate Mult(e1, e2) = evaluate e1 * evaluate e2
let evaluate Divide(e1, e2) = evaluate e1 / evaluate e2

val e : Expression = Add(Number(3), Number(4))

val es = Multiply( Add(Number(3),Number(4)), Divide(Number(8), Number(2)) )


data Maybe s = Nothing | Some(s)

let some : Maybe String = Nothing

let any  : Maybe String = Some("algo")



