def A : class > Nullable ~ Comparable = {
	
	def methodA() = println "a"
}

def B : class > A = {
	
	def methodB(a:A) = a.methodA()
}


def List{A | A > Nullable, A ~ Comparable}  : class > Collection ~ Aggregate = {
	
}

def List{A} : class 
extends Collection satisfies Aggregate = {
			         
}


def swap{A,B | A > Num, B>Num} : (a:A, b:B) = { (b, a) }