
def primes n =
    let root =  n |> Math.sqrt |> int,
        sieve = boolean-array! n true
    in
    begin
        loop i = 2 in
            when i < root do begin
                when aget sieve i do
                    loop j = i * 2 in
                       when j < n do begin
                         aset! sieve j false
                         repeat j' = j + i
                       end
                repeat i' = inc i
            end
        filter \i -> aget sieve i\ [2..<n]
    end

def calc-limit n = (int (n * logsum)) + 3
    where log = Math.log n
          loglog = Math.log log
          logsum = log + loglog

def nth-prime 1 = 2
def nth-prime 2 = 3
def nth-prime n = calc-limit n |> primes |> take n |> last


println! <| nth-prime 10001
