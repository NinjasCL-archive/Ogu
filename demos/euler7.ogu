
def primes n =
    let root =  Math.sqrt n |> int,
        sieve = boolean-array! n true
    in do
        loop i = 2 in
            when i < root then do
                when aget sieve i then
                    loop j = i * 2 in do
                       when j < n then
                         aset! sieve i  false
                       repeat j' = j + i
                    end
                repeat i' = i + 1
            end
        filter \i -> aget sieve i\ [2..<n]
    end

def calc-limit n = (int (n * logsum)) + 3
    where log = Math.log n,
          loglog = Math.log log,
          logsum = log + loglog

def nth-prime n
    | n == 1 = 2
    | n == 2 = 3
    | otherwise = calc-limit n |> primes |> take n |> last


println! <| nth-prime 10001
