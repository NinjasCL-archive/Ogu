
def swap<T> : (T,T) -> (T,T)
def swap (x,y) = (y,x)

def swap2<T> (x,y:T) -> (T,T) = (y,x)

def max x   y i = if (x > y) x else y

def head : [Any] -> Any
def head [] = error "no head for empty list"
def head (x::_) = x

def head2 xs = case xs of 
				[] -> error "no head for empty list"
				(x::_) -> x

def describeList : [Any] -> String

def describeList ls = "the list is " ++ case ls of []  -> "empty"
											       [x] -> "a singleton"
											       xs  -> "longer list"

def descList ls = "the list is " ++ what ls
where what []  = "empty"
      what [x] = "a singleton"	
      what xs  = "longer list"										       


 def replicate : Int -> Any -> [Any]
 def replicate n x 
 	| n <= 0  = []
 	| otherwise = x :: replicate (n-1) x

def take : Num|Ord -> [Any] -> [Any]
def take n _ 
 	      | n <= 0 = []
def take _ [] = []
def take n (x::xs) = x :: take (n-1) xs


def  repeat : Any -> [Any] 
def  repeat x = lazy x :: repeat x


def repeat (x:Any) -> [Any] = lazy x :: repeat x

def map : (Any->Any) -> [Any] -> [Any]
def map _ [] = []
def map f (x::xs) = f x :: map f xs


def foo = f a b c

def bar = ((f a) b) c
