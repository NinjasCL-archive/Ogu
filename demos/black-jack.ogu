

def valor-carta carta = if in? carta ['J', 'Q', 'K'] then 10 else (if carta == 'A' then 1 else carta)

def valor-mano? mano = if ases && (valor + 10) <= 21 then valor + 10 else valor
   where
        valores = mano |> map fst
        valor = valores |> map valor-carta |> sum
        ases = valores |> filter \x -> x == 'A'\ |> (not-empty?)

def solicitar-jugada! jugada =
    loop opcion =  first <| char-array <| trim <| upper <| prompt! mensaje in
    begin
        if  not-in? opcion opciones then begin
            println! "opción incorrecta"
            repeat opcion = first <| char-array <| trim <| upper <| prompt! mensaje
        end
        else begin
            println! "Opción elegida: "  opcion
            opcion
        end
    end
    where
        mensaje = if jugada == 'I'
                  then "Jugada? ('R':Retirarse, 'D':Doblar, 'O':Otra carta, 'M': Mantener cartas) --> "
                  else "Jugada? ('R':Retirarse, 'O':Otra carta, 'M': Mantener cartas) --> ",
        opciones = if jugada == 'I'
                   then ['R', 'D', 'O', 'M']
                   else ['R', 'O', 'M']


def mostrar-mano! mensaje mano =
    println! "\t" mensaje  mano  " ( Valor: "  (valor-mano? mano) " )"

def mostrar-manos! mano-jugador mano-croupier = begin
    mostrar-mano! "Cartas Jugador:  " mano-jugador
    mostrar-mano! "Cartas Couprier: " mano-croupier
end


def determinar-ganancia mano-jugador mano-croupier apuesta jugada
  | jugada == 'R' = (- apuesta)
  | otherwise = let (jugador, croupier) = (valor-mano? mano-jugador, valor-mano? mano-croupier),
                    ganancia = if (croupier <= 21) && (21 < jugador) || (jugador < croupier) && (croupier <= 21)  then (- apuesta) else apuesta
                in
                    if jugada == 'D' then ganancia * 2 else ganancia


def baraja-inicial =  [(valor, palo) | palo <- ['u2665', 'u2666', 'u2663', 'u2660'], valor <- ['A' , 2, 3, 4, 5, 6, 7, 8, 9, 10, 'J', 'Q', 'K']]


def jugar-mano! baraja-revuelta apuesta pozo =
begin
    println! "Nueva mano, apuesta $ " apuesta " pozo $ "  (pozo - apuesta) "\n"
    var mano-jugador = take 2 baraja-revuelta
        mano-croupier = take 2 (drop 2 baraja-revuelta)
        baraja = drop 4 baraja-revuelta
        jugada = 'I'
    in
    begin
        if (valor-mano? @mano-jugador) == 21 then begin
            mostrar-manos! @mano-jugador @mano-croupier
            println! "Jugador tiene black jack!"
            (3 * apuesta) / 2
        end
        else
        begin
            while in? @jugada ['I', 'O'] do
            begin
                mostrar-manos! @mano-jugador @mano-croupier
                @jugada = solicitar-jugada! @jugada
                if @jugada == 'M' then
                    while (valor-mano? @mano-croupier) < 17 do
                    begin
                        @mano-croupier = (head @baraja) :: @mano-croupier
                        @baraja = tail @baraja
                    end
                else if @jugada == 'D' then
                begin
                    @mano-jugador = (head @baraja) :: @mano-jugador
                    @baraja = tail @baraja
                    while (valor-mano? @mano-croupier) < 17 do
                    begin
                        @mano-croupier = (head @baraja) :: @mano-croupier
                        @baraja = tail @baraja
                    end
                end
                else when @jugada == 'O' then
                begin
                    @mano-jugador = (head @baraja) :: @mano-jugador
                    when (valor-mano? @mano-jugador) > 21 then
                        @jugada = 'R'
                end
            end
            println! "FIN LOOP"
            mostrar-manos! @mano-jugador @mano-croupier
            determinar-ganancia @mano-jugador @mano-croupier apuesta @jugada
        end
    end
end

def mostrar-resultado! resultado pozo
    | resultado > 0 = mensaje! (str "Jugador gana $ "  resultado) pozo
    | resultado < 0 = mensaje! (str "Jugador pierde $ "  resultado) pozo
    | otherwise = mensaje! "Empate" pozo
    where mensaje! msj pozo = println! msj "\n" "Su pozo es: $ "  pozo

def solicitar-apuesta pozo apuesta-minima =
    if pozo >= apuesta-minima then
        let msj = str "\nIngrese su apuesta (min: " apuesta-minima  ", max: " pozo ", 0 para finalizar juego): "
        in
        loop valor = read-string $ prompt! msj in
              if valor == 0 || (apuesta-minima <= valor <= pozo) then
                 valor
               else
                  repeat read-string $ prompt! msj
    else begin
        println! "su pozo no le alcanza para seguir juganbegin, inténtelo en otra oportunidad"
        -1
    end

;; Programa principal

println! "Bienvenido al juego de black jack"

def apuesta-minima = 10

loop pozo = 500, apuesta = solicitar-apuesta pozo apuesta-minima in
    if apuesta < apuesta-minima || pozo < apuesta-minima then
        println! "Gracias por participar, tu pozo final es: " pozo
    else
        let
           resultado = jugar-mano! (shuffle baraja-inicial) apuesta pozo
        in begin
            mostrar-resultado! resultado (pozo + resultado)
            repeat pozo' = pozo + resultado, apuesta' = solicitar-apuesta (pozo + resultado) apuesta-minima
        end
