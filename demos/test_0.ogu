package test

import ogu.lang.*

type Cardinal = Long | Int

def factorial  : Int -> Int

def factorial 0 = 1

def factorial 1 = 1

def factorial n = n * factorial (n - 1)


def max (x,y:Cardinal) -> Cardinal  =
		if (x > y) x 
		else y

def seis = factorial (3)

def veinticuatro = factorial 4

def uno  = 1


def doubleMe x = (x + x)

def toTuple x = (x, x)

def first t = fst t

def addFirst x y = fst x + fst y 

def addVector : (Float, Float) -> (Float, Float) -> (Float, Float)

def addVector a b = (fst a + fst b, snd a + snd b)

def mv (a, b : (Float, Float)) -> (Float, Float) = addVector a b + addVector a b


def min (x, y : Cardinal) -> Cardinal 
=  if (x < y) 
		x 
	else 		
		y



def hello(m : String)  
{ println("hello" + m) 
}

def bye(m:String) 
{	println("bye"+m)
}


def pi : Float = 3.15

def simple x = 1

def f : Int -> Int -> Int

def f a b = a + b

def g : Int, Int -> Int

def g a,b = a + b

def inc x = x + 1

//def inc = \x -> x + 1

def method(x:Int) {
	func(1)
	if (x < 2)
	   func(2)
	else { 
		func(3)
		call(x) 
	}

}

def p = T(0)





